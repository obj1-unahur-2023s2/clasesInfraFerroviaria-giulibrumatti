import vagones.*


describe "Vagones"{
	const pasajero_1= new VagonDePasajeros(ancho=2, largo=10, tieneBanio=true)
	const pasajero_2= new VagonDePasajeros(ancho=4, largo=9, tieneBanio=false)
	
	const carga_1 = new VagonDeCarga(maderasSueltas=2, cargaMaximaIdeal=8000)
	const carga_2 = new VagonDeCarga(maderasSueltas=2, cargaMaximaIdeal=8000)
	
	const dormitorio_1 = new VagonDormitorio(compartimientos=12 , camasPorCompartimiento=4)
	
	method initialize(){
		pasajero_2.estaOrdenado(false)
	}
	
	test "cantidad maxima de Pasajeros" {
		assert.equals(80, pasajero_1.cantidadPasajeros())
		assert.equals(70-15, pasajero_2.cantidadPasajeros())
		assert.equals(0, carga_1.cantidadPasajeros())
		assert.equals(48, dormitorio_1.cantidadPasajeros())
	}
	
	test "peso maximo" {
		assert.equals(2000 + 80 * 80 + 300, pasajero_1.pesoMaximo())
		assert.equals(2000 + 80 * 55 + 800, pasajero_2.pesoMaximo())
		assert.equals(7500, carga_1.pesoMaximo())
		assert.equals(7200 + 1500, carga_2.pesoMaximo())
		assert.equals(4000 + 80 * 48 + 1200, dormitorio_1.pesoMaximo())	
	}
	
	test "Carga puede transportar" {	
		assert.equals(300, pasajero_1.cargaMaxima())
		assert.equals(800, pasajero_2.cargaMaxima())
		assert.equals(6000, carga_1.cargaMaxima())
		assert.equals(7200, carga_2.cargaMaxima())
		assert.equals(1200, dormitorio_1.cargaMaxima())
	}
	
	test "tiene Banios" {
		assert.that(pasajero_1.tieneBanio())
		assert.notThat(pasajero_2.tieneBanio())
		assert.notThat(carga_1.tieneBanio())
		assert.that(dormitorio_1.tieneBanio())		
	}
	
	
}